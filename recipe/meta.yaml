{% set version = "2.12.3" %}

package:
  # https://github.com/conda/conda-build/issues/3933
  name: pytensor-suite
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/p/pytensor/pytensor-{{ version }}.tar.gz
  sha256: fa82d29ef0594e0a2751eaad40882dcd6af51333c28be0d79c1d0de9f3a81a86

build:
  number: 4
  script:
    - python -m pip install . -vv --no-deps --no-build-isolation
  entry_points:
    - pytensor-cache = bin.pytensor_cache:main

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - python
    - numpy {{ numpy }}
    - versioneer 0.28
    - tomli
    - setuptools >=48.0.0
  host:
    - python
    - cython
    - pip
    - numpy {{ numpy }}
    - versioneer 0.28
    - tomli
    - setuptools >=48.0.0
    - m2w64-toolchain  # [win]
    # The libpython conda-forge package seems to be a wrapper package
    # which configures m2w64-toolchain for Python.
    # <https://github.com/conda-forge/libpython-feedstock/blob/main/recipe/bld.bat>
    - libpython >=2.2  # [win]
    # mkl-service is only available for linux-64, win-64, and osx-64.
    # For everything else, use openblas.
    - mkl-service  # [linux64 or win64 or (osx and not arm64)]
    - openblas  # [not (linux64 or win64 or (osx and not arm64))]
    # For some reason we also need the "blas" package. Otherwise we get reports
    # of "cblas.h: No such file or directory" at import time.
    # Ref: <https://github.com/conda-forge/aesara-feedstock/issues/80>
    - blas
    - wheel
  run:
    - python
    - {{ pin_compatible("numpy") }}
    - scipy >=0.14
    - filelock
    - etuples
    - logical-unification
    - miniKanren
    - cons
    - typing_extensions

test:
  imports:
    - pytensor
  commands:
    - pytensor-cache help
    - pip check
    - python check-for-warnings.py allowed-warnings-base.txt
  requires:
    - pip
  files:
    - check-for-warnings.py
    - allowed-warnings-base.txt

  # - name: pytensor
  #   build:
  #     script:
  #       - echo "Nothing to build here, just add dependencies."
  #   requirements:
  #     build:
  #       - {{ compiler('c') }}
  #       - {{ compiler('cxx') }}
  #     host:
  #       - python
  #       - setuptools >=48.0.0
  #       - wheel
  #     run:
  #       - python
  #       - {{ pin_subpackage('pytensor-base', exact=True) }}
  #       - m2w64-toolchain  # [win]
  #       # The libpython conda-forge package seems to be a wrapper package
  #       # which configures m2w64-toolchain for Python.
  #       # <https://github.com/conda-forge/libpython-feedstock/blob/main/recipe/bld.bat>
  #       - libpython >=2.2  # [win]

  #       # mkl-service is only available for linux-64, win-64, and osx-64.
  #       # For everything else, use openblas.
  #       - mkl-service  # [linux64 or win64 or (osx and not arm64)]
  #       - openblas  # [not (linux64 or win64 or (osx and not arm64))]
  #       # For some reason we also need the "blas" package. Otherwise we get reports
  #       # of "cblas.h: No such file or directory" at import time.
  #       # Ref: <https://github.com/conda-forge/aesara-feedstock/issues/80>
  #       - blas
  #   test:
  #     imports:
  #       - pytensor
  #       - pytensor.configdefaults
  #     commands:
  #       - pytensor-cache help
  #       - pip check
  #       - python check-for-warnings.py allowed-warnings-main.txt
  #     requires:
  #       - pip
  #     files:
  #       - check-for-warnings.py
  #       - allowed-warnings-main.txt

about:
  home: https://github.com/pymc-devs/pytensor
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE.txt
  summary: An optimizing compiler for evaluating mathematical expressions.
  description: |
    PyTensor is a Python library that allows you to define, optimize/rewrite, and evaluate mathematical expressions
    involving multi-dimensional arrays efficiently.
  dev_url: https://github.com/pymc-devs/pytensor/
  doc_url: https://pytensor.readthedocs.io/en/latest/

extra:
  recipe-maintainers:
    - aseyboldt
    - maresb
    - michaelosthege
    - twiecki
  skip-lints:
    - host_section_needs_exact_pinnings